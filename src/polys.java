import java.nio.ByteBuffer;

import org.lwjgl.LWJGLException;

import org.lwjgl.opengl.Display;

import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;

public class polys {
	byte fly[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			(byte) 0x80, 0x01, (byte) 0xC0, 0x06, (byte) 0xC0, 0x03, 0x60,
			0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20, 0x04, 0x18, 0x18,
			0x20, 0x04, 0x0C, 0x30, 0x20, 0x04, 0x06, 0x60, 0x20, 0x44, 0x03,
			(byte) 0xC0, 0x22, 0x44, 0x01, (byte) 0x80, 0x22, 0x44, 0x01,
			(byte) 0x80, 0x22, 0x44, 0x01, (byte) 0x80, 0x22, 0x44, 0x01,
			(byte) 0x80, 0x22, 0x44, 0x01, (byte) 0x80, 0x22, 0x44, 0x01,
			(byte) 0x80, 0x22, 0x66, 0x01, (byte) 0x80, 0x66, 0x33, 0x01,
			(byte) 0x80, (byte) 0xCC, 0x19, (byte) 0x81, (byte) 0x81,
			(byte) 0x98, 0x0C, (byte) 0xC1, (byte) 0x83, 0x30, 0x07,
			(byte) 0xe1, (byte) 0x87, (byte) 0xe0, 0x03, 0x3f, (byte) 0xfc,
			(byte) 0xc0, 0x03, 0x31, (byte) 0x8c, (byte) 0xc0, 0x03, 0x33,
			(byte) 0xcc, (byte) 0xc0, 0x06, 0x64, 0x26, 0x60, 0x0c,
			(byte) 0xcc, 0x33, 0x30, 0x18, (byte) 0xcc, 0x33, 0x18, 0x10,
			(byte) 0xc4, 0x23, 0x08, 0x10, 0x63, (byte) 0xC6, 0x08, 0x10, 0x30,
			0x0c, 0x08, 0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 };
	byte fly1[] = { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00,
			00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };

	byte halftone[] = { (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55,
			0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55,
			0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55, (byte) 0xAA,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55, 0x55, 0x55,
			(byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, 0x55, 0x55,
			0x55, 0x55, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA, (byte) 0xAA,
			0x55, 0x55, 0x55, 0x55 };

	public void start() {
		try {
			Display.setDisplayMode(new DisplayMode(800, 600));
			Display.create();
		} catch (LWJGLException e) {
			e.printStackTrace();
			System.exit(0);
		}
		ByteBuffer flyBuffer  = ByteBuffer.allocateDirect(128);
		flyBuffer .put(fly, 0, 128);
		ByteBuffer halftoneBuffer = ByteBuffer.allocateDirect(128);
		halftoneBuffer.put(halftone, 0, 128);
		
		
		// init OpenGL
		GL11.glMatrixMode(GL11.GL_PROJECTION);
		GL11.glLoadIdentity();
		GL11.glOrtho(0, 800, 0, 600, 1, -1);
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
		while (!Display.isCloseRequested()) {
			flyBuffer .rewind();halftoneBuffer.rewind();
			//System.out.println(b1.remaining());
			GL11.glRectf(25.0f, 25.0f, 125.0f, 125.0f);
			GL11.glEnable(GL11.GL_POLYGON_STIPPLE);
			GL11.glPolygonStipple(flyBuffer );
			GL11.glRectf(125.0f, 25.0f, 225.0f, 125.0f);
			GL11.glPolygonStipple(halftoneBuffer);
			GL11.glRectf(225.0f, 25.0f, 325.0f, 125.0f);
			GL11.glDisable(GL11.GL_POLYGON_STIPPLE);
			Display.update();
		}

		Display.destroy();
	}

	public void drawOneLine(float x1, float y1, float x2, float y2) {
		GL11.glBegin(GL11.GL_LINES);
		GL11.glVertex2f(x1, y1);
		GL11.glVertex2f(x2, y2);
		GL11.glEnd();
	}

	public static void main(String[] argv) {
		polys quadExample = new polys();
		quadExample.start();
	}
}
